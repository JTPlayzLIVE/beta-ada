@mixin at-font-face($display-name, $file-path, $font-weight, $font-style) {
  $file-path: unquote($file-path);

  @font-face {
    font-family: unquote($display-name);
    font-style: unquote($font-style);
    font-weight: $font-weight;
    font-display: fallback;
    src: asset_url("#{$file-path}.woff2") format("woff2"),
      asset_url("#{$file-path}.woff") format("woff"),
      asset_url("#{$file-path}.ttf") format("truetype");
  }
}

@mixin generate-font-face(
  $font-style-src,
  $output-weights,
  $display-name,
  $dir,
  $font-style
) {
  @each $font-weight, $filename in $font-style-src {
    @each $key, $output-weight in $output-weights {
      @if $output-weight == $font-weight and $filename {
        @include at-font-face(
          "#{$display-name}",
          "#{$dir}/#{$filename}",
          #{$font-weight},
          unquote("#{$font-style}")
        );
      }
    }
  }
}

@mixin add-background-svg($image-name, $image-path: $theme-image-path) {
  $image-name: unquote($image-name);
  background-image: asset_url("#{$image-name}.svg"),
    linear-gradient(transparent, transparent);
  background-repeat: no-repeat;
}

@mixin add-color-icon($icon-object, $contrast-bg) {
  $filename-base: map-get($icon-object, "name");
  $svg-height: map-get($icon-object, "svg-height");
  $svg-width: map-get($icon-object, "svg-width");
  $aspect: $svg-width / $svg-height;
  $height: if(
    unitless(map-get($icon-object, "height")),
    units(map-get($icon-object, "height")),
    map-get($icon-object, "height")
  );
  $width: $height * $aspect;
  $container-height: if(
    map-has-key($icon-object, "container-height"),
    units(map-get($icon-object, "container-height")),
    null
  );
  $container-width: if(
    map-has-key($icon-object, "container-width"),
    units(map-get($icon-object, "container-width")),
    null
  );
  $color: if(
    map-has-key($icon-object, "color"),
    map-get($icon-object, "color"),
    "ink"
  );
  $color-variant: if(
    map-has-key($icon-object, "color-variant"),
    map-get($icon-object, "color-variant"),
    "white"
  );
  $color-hover: if(
    map-has-key($icon-object, "color-hover"),
    map-get($icon-object, "color-hover"),
    null
  );
  $rotate: if(
    map-has-key($icon-object, "rotate"),
    map-get($icon-object, "rotate"),
    null
  );
  $path: if(
    map-has-key($icon-object, "path"),
    map-get($icon-object, "path"),
    $theme-image-path
  );
  $ie11-variant: get-color-token-from-bg($contrast-bg, "white", "black");
  $filename-ie11: if(
    $ie11-variant == "white",
    "usa-icons-bg/#{$filename-base}--white.svg",
    "usa-icons/#{$filename-base}.svg"
  );

  $mask-props: asset_url("usa-icons/#{$filename-base}.svg") no-repeat center /
    #{$width} #{$height};
  $image-props: asset_url("#{$filename-ie11}") no-repeat center / #{$width} #{$height};

  // Default background shorthand for browsers that don't support mask or supports.
  background: $image-props;
  display: inline-block;
  height: if($container-height, $container-height, $height);
  width: if($container-width, $container-width, $width);
  @if $rotate {
    transform: rotate($rotate);
  }

  // Mask supported styles
  @supports (mask: url("")) {
    background: none;
    background-color: color($color);
    mask: $mask-props;
    @if $color-hover {
      &:hover {
        background-color: color($color-hover);
      }
    }
  }
}
